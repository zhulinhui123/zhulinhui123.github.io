<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>阅读平台</title>
    <link href="/2023/07/07/%E9%98%85%E8%AF%BB%E5%B9%B3%E5%8F%B0/"/>
    <url>/2023/07/07/%E9%98%85%E8%AF%BB%E5%B9%B3%E5%8F%B0/</url>
    
    <content type="html"><![CDATA[<p>android-app:<a href="https://drive.google.com/file/d/1qAsVDRkmP9kkBzRMEEWErufag6NnMqvl/view">https://drive.google.com/file/d/1qAsVDRkmP9kkBzRMEEWErufag6NnMqvl/view</a></p><p>镜像：<a href="https://1lib.ml/">https://1lib.ml</a></p><p>​           <a href="https://zlibrary.tk/">https://zlibrary.tk</a></p><p>​           <a href="https://zlibrary.ml/">https://zlibrary.ml</a></p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阅读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>视频精华</title>
    <link href="/2023/06/27/%E8%AF%BE%E4%B8%AD%E7%B2%BE%E5%8D%8E/"/>
    <url>/2023/06/27/%E8%AF%BE%E4%B8%AD%E7%B2%BE%E5%8D%8E/</url>
    
    <content type="html"><![CDATA[<h3 id="爱编程的大丙"><a href="#爱编程的大丙" class="headerlink" title="爱编程的大丙"></a>爱编程的大丙</h3><ul><li><p>并发网络通信</p><p>20-基于多线程的并发服务器实现</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>精选视频</category>
      
    </categories>
    
    
    <tags>
      
      <tag>视频</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/06/25/%E9%80%86%E5%90%91%E6%80%9D%E7%BB%B4/"/>
    <url>/2023/06/25/%E9%80%86%E5%90%91%E6%80%9D%E7%BB%B4/</url>
    
    <content type="html"><![CDATA[<p>高阶思维对于低阶思维来说就是降维打击</p><h3 id="逆向思维"><a href="#逆向思维" class="headerlink" title="逆向思维"></a>逆向思维</h3><ul><li><p>缺点逆用法</p><blockquote><p>缺点逆用法的主旨就在于&#x3D;&#x3D;“缺点即优点”&#x3D;&#x3D; ：如何反过来利用缺点，做到变害为利</p></blockquote></li><li><p>心理逆向法</p></li><li></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>字节序</title>
    <link href="/2023/06/24/%E5%AD%97%E8%8A%82%E5%BA%8F/"/>
    <url>/2023/06/24/%E5%AD%97%E8%8A%82%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="字节序"><a href="#字节序" class="headerlink" title="字节序"></a>字节序</h3><blockquote><p>字节序</p><p>字节序，顾名思义字节的顺序，就是大于一个字节类型的数据在内存中的存放顺序，也就是说单字节(char)和字符串都没有字节序的问题,而(short, int long)都有字节序问题</p><p>主机字节序(小端)：数据的&#x3D;&#x3D;低&#x3D;&#x3D;位字节存储到&#x3D;&#x3D;低&#x3D;&#x3D;地址位</p><p>网络字节序(大端)：数据的&#x3D;&#x3D;低&#x3D;&#x3D;位字节存储到&#x3D;&#x3D;高&#x3D;&#x3D;地址位</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-comment">//这套api主要用于网络通信过程中IP和端口的转换</span><br><span class="hljs-comment">//将一个短整型从主机字节序 -&gt; 网络字节序</span><br><span class="hljs-type">uint16_t</span> <span class="hljs-title function_">htons</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> port)</span>;<br><span class="hljs-type">uint16_t</span> <span class="hljs-title function_">ntohs</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> port)</span>;<br><span class="hljs-comment">// af 表示地址族协议，是ipv4还是ipv6</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">inet_pton</span><span class="hljs-params">(<span class="hljs-type">int</span> af, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *src, <span class="hljs-type">void</span>*dst)</span> <span class="hljs-comment">//用来转换ip字符串， return 1 表示</span><br><span class="hljs-comment">//转换成功, 返回0或-1则失败</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* <span class="hljs-title function_">inet_ntop</span><span class="hljs-params">(<span class="hljs-type">int</span> af, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *src, <span class="hljs-type">char</span>* dst, <span class="hljs-type">socklen_t</span> size)</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>语法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GDB</title>
    <link href="/2023/06/24/GDB/"/>
    <url>/2023/06/24/GDB/</url>
    
    <content type="html"><![CDATA[<h3 id="GDB一"><a href="#GDB一" class="headerlink" title="GDB一"></a>GDB一</h3><ul><li><p>启动调试并传递参数</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">gdb --args layout 1 2 &quot;3 4&quot; //执行run后设置参数<br>set args 参数1 参数2        //在没有执行run命令前，设置参数<br><br></code></pre></td></tr></table></figure></li><li><p>附加到进程(适用于程序已经启动了)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">查看程序的pid:  ps -aux | grep layout(执行程序)<br>gdb attach <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">pid</span>&gt;</span></span><br>gdb --pid <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">pid</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p>逐过程执行</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">一 单步执行(step-over)<br><span class="hljs-bullet">*</span> n(next) 遇到函数跳过函数，不会进入到里面执行<br><span class="hljs-bullet">*</span> s(step) 遇到函数进入到函数里面单步执行<br><br></code></pre></td></tr></table></figure></li><li><p>逐语句执行</p></li><li><p>退出当前函数</p>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">finish<br></code></pre></td></tr></table></figure></li><li><p>退出调试</p></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">//调试程序退出了，但你运行的进程还在工作<br>detach(分离)<br>//<br>q<br></code></pre></td></tr></table></figure><h3 id="设置断点"><a href="#设置断点" class="headerlink" title="设置断点"></a>设置断点</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs markdown">//在具体的行设置断点<br>b pragrom<span class="hljs-emphasis">_file.c:n(行数)</span><br><span class="hljs-emphasis">//查看断点信息</span><br><span class="hljs-emphasis">i b</span><br><span class="hljs-emphasis">//查看变量命令</span><br><span class="hljs-emphasis">p 变量</span><br><span class="hljs-emphasis">//将函数里的局部变量都显示出来</span><br><span class="hljs-emphasis">i locals</span><br><span class="hljs-emphasis">//直接跳到下一个断点</span><br><span class="hljs-emphasis">c</span><br><span class="hljs-emphasis">//给有同名的函数都设上断点的方式</span><br><span class="hljs-emphasis">rb 函数名(打上断点的可以是虚函数，同名函数)</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">//条件断点，只有满足了条件才能断开</span><br><span class="hljs-emphasis">b main.cpp:14 if i==90</span><br><span class="hljs-emphasis">//临时断点，当在循环里时，断点只会命中一次，</span><br><span class="hljs-emphasis">tb </span><br><span class="hljs-emphasis">//</span><br><span class="hljs-emphasis">//删除断点</span><br><span class="hljs-emphasis">delete/del n(断点)</span><br><span class="hljs-emphasis">//禁用断点，将来可以用enable重新启用</span><br><span class="hljs-emphasis">disable n</span><br><span class="hljs-emphasis"></span><br></code></pre></td></tr></table></figure><h3 id="查看变量"><a href="#查看变量" class="headerlink" title="查看变量"></a>查看变量</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs markdown">//查看函数的所有参数<br>i args<br><br>//设置显示格式，遇到\0结束<br>set print null-stop<br>//设置结构体显示<br>set print pretty<br>//修改变量的值<br>p arg=<br><br></code></pre></td></tr></table></figure><h3 id="查看-x2F-修改内存"><a href="#查看-x2F-修改内存" class="headerlink" title="查看&#x2F;修改内存"></a>查看&#x2F;修改内存</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">//查看地址<br>x &amp;变量<br>//看字符串<br>x /s 地址<br></code></pre></td></tr></table></figure><h3 id="寄存器查看于修改"><a href="#寄存器查看于修改" class="headerlink" title="寄存器查看于修改"></a>寄存器查看于修改</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown">没有调试符号(symbol)，可以看寄存器<br><br>//在没有调试符号时，如何看到函数的传递值<br><br>//<br><br>//<br>//看代码所在行的地址<br>info line n(行数)<br>pc(指令寄存器存放下一次程序运行地址)/rip<br>p $pc=地址<br></code></pre></td></tr></table></figure><h3 id="源代码管理，查看，搜索"><a href="#源代码管理，查看，搜索" class="headerlink" title="源代码管理，查看，搜索"></a>源代码管理，查看，搜索</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs markdown">//回到前面10行<br>l -<br>//显示函数代码<br>l 函数名<br>//指定行数显示<br>l main.cpp:10<br>//回到行首显示<br>l 0<br>//搜索源代码<br>1 search<br>2.forward-search<br>3.reverse-search<br><br></code></pre></td></tr></table></figure><h3 id="函数调用栈管理"><a href="#函数调用栈管理" class="headerlink" title="函数调用栈管理"></a>函数调用栈管理</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">//查看函数调用栈<br>bt/backtrace<br><br></code></pre></td></tr></table></figure><h3 id="观察点使用"><a href="#观察点使用" class="headerlink" title="观察点使用"></a>观察点使用</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs markdown">常用在多线程里，观察变量<br><br><br>//变量发生写变化，断点有效<br>watch 变量<br>//变量发生读变化，断点有效<br>rwatch 变量<br><br>//变量读或写都发生变化，断点有效<br>awatch 变量<br><br>//查看线程<br>i threads<br>//先加断点,启动程序，才能运行线程<br>b thread1 -&gt; r -&gt; watch 变量 thread n(线程)<br>//当有条件时控制观察断点，可以提高效率<br>watch 变量1 + 变量2 &gt; 10<br></code></pre></td></tr></table></figure><h3 id="捕获点使用"><a href="#捕获点使用" class="headerlink" title="捕获点使用"></a>捕获点使用</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">//捕获异常<br><br>catchpoint<br>//捕获系统掉用,如close,这会在程序加载时打上多个close，这不是我们想看到的，可以直接在 b main -&gt; r -&gt; catch syscall close<br>catch syscall<br></code></pre></td></tr></table></figure><h3 id="断点执行命令"><a href="#断点执行命令" class="headerlink" title="断点执行命令"></a>断点执行命令</h3><blockquote><p>当执行到断点的时候，在断点处停下来的时候gdb自动为我们执行提前设置好的命令</p><p>好处：设置断点的目的就是要在程序中断下来的时候，去检查程序运行时的状态信息，比如说&#x3D;&#x3D;变量&#x3D;&#x3D;的信息，&#x3D;&#x3D;调用栈&#x3D;&#x3D;的信息，尤其是在一些循环里的断点，省去了没次输入命令的麻烦</p><p>调试一个程序，费了很大的劲找到了可能会出问题的地方，我们在那里设置断点，希望程序运行到那个地方，能观察到一些信息，这时候又有新任务来了，调试被迫中断下来了</p><p>解决：将断点信息保存到文件 save breakpoint file(文件名)</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown">commands<br>&gt;printf &quot;pre %d&quot;, pre-&gt;data<br><span class="hljs-quote">&gt;</span><br><span class="hljs-quote">end</span><br><br>//保存断点命令<br>save breakpoint file(文件名)<br>//查看文件内容<br>!cat file<br>//加载文件<br>source 文件名<br></code></pre></td></tr></table></figure><h3 id="GDB多窗口管理"><a href="#GDB多窗口管理" class="headerlink" title="GDB多窗口管理"></a>GDB多窗口管理</h3><blockquote><p>调式文件名为viewsource</p><p>其中在src 里&#x3D;&#x3D;B+&#x3D;&#x3D;表示至少命中过一次，而&#x3D;&#x3D;b+&#x3D;&#x3D;表示没有命中过</p><p>相反&#x3D;&#x3D;b-&#x3D;&#x3D;表示断点被disable了</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs markdown">//管理源文件窗口<br>layout src<br><br>//切分窗口<br>layout split<br><br>//管理汇编窗口<br>layout asm<br><br>//管理寄存器窗口<br>layout reg<br><br>//切换窗口焦点<br>focus src/asm/reg<br><br>//查看当前拥有焦点的窗口<br>info win<br><br>//退出窗口模式<br>ctrl+x+a<br></code></pre></td></tr></table></figure><h3 id="查看对象类型"><a href="#查看对象类型" class="headerlink" title="查看对象类型"></a>查看对象类型</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdow">查看结构体<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>调试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/06/23/Tcp%E5%8D%8F%E8%AE%AE/"/>
    <url>/2023/06/23/Tcp%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//server.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-comment">//在vim中如果想看到man里具体函数，可以用shift + k</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> fd = socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(fd == <span class="hljs-number">-1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;socket&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">saddr</span>;</span><br>    saddr.sin_family = AF_INET;<br>    saddr.sin_port = htons(<span class="hljs-number">9999</span>);<span class="hljs-comment">//5000以下都被内核占用了</span><br>    saddr.sin_addr.s_addr = INADDR_ANY;<br>    bind(fd, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;saddr, <span class="hljs-keyword">sizeof</span>(saddr));<br>    <span class="hljs-type">int</span> ret = listen(fd, <span class="hljs-number">128</span>);<br>    <span class="hljs-keyword">if</span>(ret == <span class="hljs-number">-1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;listen&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">caddr</span>;</span><br>    <span class="hljs-type">int</span> addrlen = <span class="hljs-keyword">sizeof</span>(caddr);<br>    <span class="hljs-type">int</span> cfd = accept(fd, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;caddr, &amp;addrlen);<br>    <span class="hljs-keyword">if</span>(cfd == <span class="hljs-number">-1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;accept&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//client.c</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> fd = socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(fd &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;socket&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">saddr</span>;</span><br>    saddr.sin_family = AF_INET;<br>    saddr.sin_port = htons(<span class="hljs-number">9999</span>);<br>    saddr.sin_addr.s_addr = pton(<span class="hljs-string">&quot;192.168.254.129&quot;</span>);<br>    <span class="hljs-type">int</span> res = connect(fd, (<span class="hljs-keyword">struct</span> sock_addr*)&amp;saddr, <span class="hljs-keyword">sizeof</span>(saddr)));<br>    <span class="hljs-keyword">if</span>(res &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;connect&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(res == <span class="hljs-number">1</span>) &#123;<br>        <br>    &#125;<br>&#125;<br><br><br><br><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>按键选择</title>
    <link href="/2023/06/03/%E6%8C%89%E9%94%AE%E9%80%89%E6%8B%A9/"/>
    <url>/2023/06/03/%E6%8C%89%E9%94%AE%E9%80%89%E6%8B%A9/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">函数功能判断按键是否被按下</span><br><span class="hljs-comment">mode = 1 连续扫描(按键一直按着，有效，相当于遥控器调节音量)</span><br><span class="hljs-comment">mode = 0 单次扫描(按键一直按着只相当于按下一次，其他无效)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> KEY_NOPRESS 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> KEY1_PRESS 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> KEY2_PRESS 2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> KEY2_PRESS 3</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> KEY2_PRESS 4</span><br>sbit KEY1 P1^<span class="hljs-number">1</span><br>sbit KEY2 P1^<span class="hljs-number">2</span><br>sbit KEY3 P1^<span class="hljs-number">3</span><br>sbit KEY4 P1^<span class="hljs-number">4</span><br>u8 <span class="hljs-title function_">key_sacn</span><span class="hljs-params">(<span class="hljs-type">int</span> mode)</span><br>&#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> state = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(mode) state = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(state &amp;&amp; (!KEY1||!KEY2||!KEY3||!KEY4)) <br>    &#123;<br>        delay_us(<span class="hljs-number">1000</span>);<br>        <span class="hljs-keyword">if</span>(!KEY1) state = <span class="hljs-number">0</span>;<span class="hljs-keyword">return</span> KEY1_PRESS;<br>        <span class="hljs-keyword">if</span>(!KEY2) state = <span class="hljs-number">0</span>;<span class="hljs-keyword">return</span> KEY2_PRESS;<br>        <span class="hljs-keyword">if</span>(!KEY3) state = <span class="hljs-number">0</span>;<span class="hljs-keyword">return</span> KEY3_PRESS;<br>        <span class="hljs-keyword">if</span>(!KEY4) state = <span class="hljs-number">0</span>;<span class="hljs-keyword">return</span> KEY4_PRESS;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(KEY1&amp;&amp;KEY2&amp;&amp;KEY3&amp;&amp;KEY4)<br>    &#123;<br>        state = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> KEY_NOPRESS;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>精选代码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>硬件模块</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ros通讯</title>
    <link href="/2023/05/28/ros%E9%80%9A%E8%AE%AF%E6%9C%BA%E5%88%B6/"/>
    <url>/2023/05/28/ros%E9%80%9A%E8%AE%AF%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="话题通信"><a href="#话题通信" class="headerlink" title="话题通信"></a>话题通信</h3><h4 id="消息类型std-msgs"><a href="#消息类型std-msgs" class="headerlink" title="消息类型std_msgs"></a>消息类型std_msgs</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#pub</span><br></code></pre></td></tr></table></figure><h4 id="自定义话题消息msg"><a href="#自定义话题消息msg" class="headerlink" title="自定义话题消息msg"></a>自定义话题消息msg</h4><p>注意事项：vscode 需要cpp配置： 将msg消息生成的头文件路径配置到c_cpp_properties.json 的includepath属性, vscode python配置：将msg消息生成的__文件__路径是lib下的 配置到setting.json &#x3D;&#x3D;<em>python.autoComplete.extraPaths</em>&#x3D;&#x3D;</p><h3 id="服务通信"><a href="#服务通信" class="headerlink" title="服务通信"></a>服务通信</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">问题：</span><br><span class="hljs-comment">如果先启动客户端，那么会请求异常</span><br><span class="hljs-comment">需求：</span><br><span class="hljs-comment">如果先启动客户端，不要直接抛出异常，而是挂起，等服务器启动后，在正常请求</span><br><span class="hljs-comment">场景：</span><br><span class="hljs-comment">launch启动多个执行程序时，无法保证谁先谁后</span><br><span class="hljs-comment">解决：</span><br><span class="hljs-comment">c++在ROS中内置了相关函数，这些函数可以让客户端挂起，等待服务器启动</span><br><span class="hljs-comment">函数1 client.waitForExistence()</span><br><span class="hljs-comment">函数2 ros::service::waitForService(&quot;话题&quot;)</span><br><span class="hljs-comment">python:</span><br><span class="hljs-comment"> client.wait_for_service()</span><br><span class="hljs-comment"> rospy.wait_for_service(&quot;话题&quot;)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//server</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ros/ros.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;plumbing_server_client/AddInts.h&quot;</span></span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">doNum</span><span class="hljs-params">(plumbing_server_client::AddInts::Request &amp;request, </span></span><br><span class="hljs-params"><span class="hljs-function">plumbing_server_client::AddInts::Response &amp;response)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">setlocale</span>(LC_ALL, <span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-comment">//1. 处理请求</span><br>    <span class="hljs-type">int</span> num1 = request.num1;<br>    <span class="hljs-type">int</span> num2 = request.num2;<br>    <span class="hljs-built_in">ROS_INFO</span>(<span class="hljs-string">&quot;request num1: %d, num2: %d&quot;</span>, num1, num2);<br>    <span class="hljs-comment">//2. 回复响应</span><br>    <span class="hljs-comment">//处理逻辑：两数相加</span><br>    <span class="hljs-type">int</span> sum = num1 + num2;<br>    response.sum = sum;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    ros::<span class="hljs-built_in">init</span>(argc, argv, <span class="hljs-string">&quot;waiter&quot;</span>);<br>    ros::NodeHandle nh;<br><br>    ros::ServiceServer sever = nh.<span class="hljs-built_in">advertiseService</span>(<span class="hljs-string">&quot;addInts&quot;</span>, doNum);<br>    <span class="hljs-built_in">ROS_INFO</span>(<span class="hljs-string">&quot;服务器启动了&quot;</span>);<br>    ros::<span class="hljs-built_in">spin</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>---------------------------------------------------------------------------------------<br><br><span class="hljs-comment">//client</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ros/ros.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;plumbing_server_client/AddInts.h&quot;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(argc != <span class="hljs-number">3</span>) &#123;<br>        <span class="hljs-built_in">ROS_INFO</span>(<span class="hljs-string">&quot;resume input x, y&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    ros::<span class="hljs-built_in">init</span>(argc, argv, <span class="hljs-string">&quot;consumer&quot;</span>);<br>    ros::NodeHandle nh;<br>    ros::ServiceClient client = nh.<span class="hljs-built_in">serviceClient</span>&lt;plumbing_server_client::AddInts&gt;(<span class="hljs-string">&quot;addInts&quot;</span>);<br>    plumbing_server_client::AddInts ai;<br>    ai.request.num1 = <span class="hljs-built_in">atoi</span>(argv[<span class="hljs-number">1</span>]);<br>    ai.request.num2 = <span class="hljs-built_in">atoi</span>(argv[<span class="hljs-number">2</span>]);<br>    <span class="hljs-type">bool</span> flag = client.<span class="hljs-built_in">call</span>(ai);<br>    <span class="hljs-keyword">if</span>(flag) &#123;<br>        <span class="hljs-built_in">ROS_INFO</span>(<span class="hljs-string">&quot;send request true&quot;</span>);<br>        <span class="hljs-built_in">ROS_INFO</span>(<span class="hljs-string">&quot;recv sum: %d&quot;</span>, ai.response.sum);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">ROS_INFO</span>(<span class="hljs-string">&quot;send request false&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="参数服务器"><a href="#参数服务器" class="headerlink" title="参数服务器"></a>参数服务器</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs markdown">参数服务器在ROS中主要用于实现不同节点之间的数据共享，参数节点相当于独立于所有节点的一个公共容器，<br>可以将数据存储在该容器中，被不同的节点调用，当然不同的节点也可以往其中的节点存储数据<br><br>典型的应用场景：<br>导航实现，会进行路径规划，比如：全局路径规划，设计一个从出发点到目标点的大致路径，本地路径规划会根据当前<br>路况生成实时的行进路径<br><br>分析场景<br><span class="hljs-code">路径规划时，需要考虑小车的尺寸，我们可以将这些尺寸信息存储到参数服务器，全局路径规划节点，与本地路径规划节点，都可以从参数服务器中调用这些参数</span><br><span class="hljs-code">参数服务器，一般适用于存在数据共享的一些应用场景</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ros</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ros</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>条件语句</title>
    <link href="/2023/05/27/%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/"/>
    <url>/2023/05/27/%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<p><img src="C:\Users\zhulinhui\AppData\Roaming\Typora\typora-user-images\image-20230527164529308.png" alt="image-20230527164529308"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">func9</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">int</span> time = <span class="hljs-number">0</span> , dis = <span class="hljs-number">0</span> , mode = <span class="hljs-number">0</span>;<br><span class="hljs-type">double</span> sum = <span class="hljs-number">0</span>, km = <span class="hljs-number">0</span>, qblc = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> qbjz = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;选择车型：普通车(1) 中档车(2) 高档车(3):\n&quot;</span>);<br>scanf_s(<span class="hljs-string">&quot;%d&quot;</span>, &amp;mode);<br><span class="hljs-keyword">if</span> (mode == <span class="hljs-number">1</span>)<br>&#123;<br>qbjz = <span class="hljs-number">11</span>;<br>qblc = <span class="hljs-number">3</span>;<br>km = <span class="hljs-number">2.4</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (mode == <span class="hljs-number">2</span>)<br>&#123;<br>qbjz = <span class="hljs-number">11</span>;<br>qblc = <span class="hljs-number">2.5</span>;<br>km = <span class="hljs-number">2.9</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (mode == <span class="hljs-number">3</span>)<br>&#123;<br>qbjz = <span class="hljs-number">11</span>;<br>qblc = <span class="hljs-number">2</span>;<br>km = <span class="hljs-number">2.9</span>;<br>&#125;<br>sum = qbjz;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入公里数：\n&quot;</span>);<br>scanf_s(<span class="hljs-string">&quot;%d&quot;</span>, &amp;dis);<br>sum += (dis - qblc) * km;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入时间：\n&quot;</span>);<br>scanf_s(<span class="hljs-string">&quot;%d&quot;</span>, &amp;time);<br><span class="hljs-keyword">if</span> (time &gt;= <span class="hljs-number">23</span> || time &lt;= <span class="hljs-number">5</span>)<br>&#123;<br>sum += (dis - qblc) * <span class="hljs-number">0.2</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (dis &gt; <span class="hljs-number">20</span>)<br>&#123;<br>sum += (dis - qblc) * <span class="hljs-number">0.5</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;总价为 : %.2lf\n&quot;</span>,sum);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>语法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vscode 配置 ros</title>
    <link href="/2023/05/27/ros3/"/>
    <url>/2023/05/27/ros3/</url>
    
    <content type="html"><![CDATA[<p>vscode 配置 ros</p><p>task.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;build&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;isDefault&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-comment">//直接按ctrl + shift + b, 直接编译工作空间</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#! /usr/bin/env python</span><br><br><span class="hljs-comment"># 最新版本20的不配置CMakeList.txt 执行 python 文件抛出异常：</span><br><span class="hljs-comment"># /usr/bin/env: &quot;python&quot;: 没有找到那个文件或目录</span><br><span class="hljs-comment"># 原因：当前noetic使用的是 python3</span><br><span class="hljs-comment"># 解决：</span><br><span class="hljs-comment">#      1.直接声明解释器为 python3(不建议)</span><br><span class="hljs-comment">#      2.通过软链接将 python 链接到 python3(建议)： sudo ln -s /usr/bin/python3</span><br><span class="hljs-keyword">import</span> rospy<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    rospy.init_node(<span class="hljs-string">&quot;no_config&quot;</span>)<br>    rospy.loginfo(<span class="hljs-string">&quot;no config CMakeLists.txt&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="C:\ROS\photo\h.png" alt="h"></p><blockquote><p>执行语句：roslaunch hello_vscode start_turtle.launch</p><p>如果结点有日志输出的话,想要输出到控制台需要加入属性output</p><node pkg="hello_vscode" type="hello_vscode_c" name="hello" output="screen" /></blockquote>]]></content>
    
    
    <categories>
      
      <category>配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ros</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ros_2</title>
    <link href="/2023/05/25/ros_2/"/>
    <url>/2023/05/25/ros_2/</url>
    
    <content type="html"><![CDATA[<h3 id="1-创建工作空间"><a href="#1-创建工作空间" class="headerlink" title="1. 创建工作空间"></a>1. 创建工作空间</h3><p><img src="C:\ROS\photo\6.jpg" alt="6"></p><p><img src="C:\ROS\photo\a.png" alt="a"></p><p><img src="C:\ROS\photo\7.jpg" alt="7"></p><p>因为设置了环境变量，所以不需要重复设置</p><h3 id="2-ROS通信编程"><a href="#2-ROS通信编程" class="headerlink" title="2. ROS通信编程"></a>2. ROS通信编程</h3><h4 id="话题编程"><a href="#话题编程" class="headerlink" title="话题编程"></a>话题编程</h4><p><img src="C:\ROS\photo\8.jpg" alt="8"></p><h4 id="发布者"><a href="#发布者" class="headerlink" title="发布者"></a>发布者</h4><p><img src="C:\ROS\photo\b.png" alt="b"></p><h4 id="订阅者"><a href="#订阅者" class="headerlink" title="订阅者"></a>订阅者</h4><p><img src="C:\ROS\photo\c.png" alt="c"></p><h4 id="如何编译代码"><a href="#如何编译代码" class="headerlink" title="如何编译代码"></a>如何编译代码</h4><p><img src="C:\ROS\photo\9.jpg" alt="9"></p><p><img src="C:\ROS\photo\10.jpg" alt="10"></p><h4 id="如何定义话题消息"><a href="#如何定义话题消息" class="headerlink" title="如何定义话题消息"></a>如何定义话题消息</h4><p><img src="C:\ROS\photo\11.jpg" alt="11"></p><p><img src="C:\ROS\photo\d.png" alt="d"></p><hr><h4 id="服务编程（同步，并能处理逻辑问题）"><a href="#服务编程（同步，并能处理逻辑问题）" class="headerlink" title="服务编程（同步，并能处理逻辑问题）"></a>服务编程（同步，并能处理逻辑问题）</h4><p><img src="C:\ROS\photo\12.jpg" alt="12"></p><p><img src="C:\ROS\photo\13.jpg" alt="13"></p><p><img src="C:\ROS\photo\f.png" alt="f"></p><blockquote><p>— 上半部分服务端接收数据，下半部分是客户端接收的数据类型</p></blockquote><h4 id="创建客户端"><a href="#创建客户端" class="headerlink" title="创建客户端"></a>创建客户端</h4><p><img src="C:\ROS\photo\g.png" alt="g"></p><hr><h4 id="动作编程"><a href="#动作编程" class="headerlink" title="动作编程"></a>动作编程</h4><h3 id="3-实现分布式通信"><a href="#3-实现分布式通信" class="headerlink" title="3. 实现分布式通信"></a>3. 实现分布式通信</h3><h3 id="4-ROS中的关键组件"><a href="#4-ROS中的关键组件" class="headerlink" title="4. ROS中的关键组件"></a>4. ROS中的关键组件</h3>]]></content>
    
    
    <categories>
      
      <category>ros</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ros</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ros</title>
    <link href="/2023/05/25/ros/"/>
    <url>/2023/05/25/ros/</url>
    
    <content type="html"><![CDATA[<p><img src="C:\ROS\photo\1.jpg" alt="1"></p><p><img src="C:\ROS\photo\2.jpg" alt="2"></p><p><img src="C:\ROS\photo\3.jpg" alt="3"></p><p><img src="C:\ROS\photo\4.jpg" alt="4"></p><p><img src="C:\ROS\photo\5.jpg" alt="5"></p><h3 id="计算图"><a href="#计算图" class="headerlink" title="计算图"></a>计算图</h3><p>rqt_</p><h3 id="查看节点消息"><a href="#查看节点消息" class="headerlink" title="查看节点消息"></a>查看节点消息</h3><p>rosnode info &#x2F;+节点</p><h3 id="监听话题具体内容"><a href="#监听话题具体内容" class="headerlink" title="监听话题具体内容"></a>监听话题具体内容</h3><p>rostopic echo &#x2F;..&#x2F;..</p>]]></content>
    
    
    <categories>
      
      <category>ros</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ros</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>位段操作</title>
    <link href="/2023/05/23/%E4%BD%8D%E6%AE%B5%E6%93%8D%E4%BD%9C/"/>
    <url>/2023/05/23/%E4%BD%8D%E6%AE%B5%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h3 id="位段操作"><a href="#位段操作" class="headerlink" title="位段操作"></a>位段操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//当结构体里面是同一类型时, 合并成一个类型字节量</span><br><span class="hljs-comment">//当不是同一类型时，按最宽的进行字节对齐</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Time</span> &#123;</span><br>   <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> year: <span class="hljs-number">11</span><br>   <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> month: <span class="hljs-number">4</span><br>   <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> day: <span class="hljs-number">5</span><br>&#125;;<br><span class="hljs-comment">/*如何将一个数二进制显示出来*/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Bits</span> &#123;</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>  bit1 : <span class="hljs-number">1</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>  bit2 : <span class="hljs-number">1</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>  bit2 : <span class="hljs-number">1</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>  bit2 : <span class="hljs-number">1</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>  bit2 : <span class="hljs-number">1</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>  bit2 : <span class="hljs-number">1</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>  bit2 : <span class="hljs-number">1</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>  bit2 : <span class="hljs-number">1</span>;<br>&#125;;<br><span class="hljs-type">void</span> <span class="hljs-title function_">func</span><span class="hljs-params">()</span> &#123;<br>     <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> num = <span class="hljs-number">123</span>;<br>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Bits</span>* <span class="hljs-title">p</span> =</span> &amp;num;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>语法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/05/23/%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%AD%E7%9A%84%E4%BD%8D%E6%AE%B5%E6%93%8D%E4%BD%9C/"/>
    <url>/2023/05/23/%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%AD%E7%9A%84%E4%BD%8D%E6%AE%B5%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>空间分配方法</title>
    <link href="/2023/05/22/%E7%A9%BA%E9%97%B4%E5%88%86%E9%85%8D/"/>
    <url>/2023/05/22/%E7%A9%BA%E9%97%B4%E5%88%86%E9%85%8D/</url>
    
    <content type="html"><![CDATA[<h3 id="空间分配方法"><a href="#空间分配方法" class="headerlink" title="空间分配方法"></a>空间分配方法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*当所需结构体数组个数不太多时：</span><br><span class="hljs-comment">可以以下种方式设计：*/</span><br><br><span class="hljs-comment">/*定义结构体*/</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">x_socket_t</span> &#123;</span><br>    <span class="hljs-comment">/*用来标记是否被占用*/</span><br>    <span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span><br>        SOCKET_STATE_FREE,<br>        SOCKET_STATE_USED,<br>    &#125;state<br>&#125;<span class="hljs-type">x_socket_t</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SOCKET_MAX_NR      10</span><br><span class="hljs-type">static</span> <span class="hljs-type">x_socket_t</span> tbl[SOCKET_MAX_NR];<br><span class="hljs-comment">/*获取索引*/</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get_index</span><span class="hljs-params">(x_socket* s)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>)(s - tbl);<span class="hljs-comment">//(s - tbl)/sizeof(x_socket_t)编译器处理了</span><br>&#125;<br><span class="hljs-comment">/*获取socket指针*/</span><br><span class="hljs-type">static</span> <span class="hljs-type">x_socket_t</span>* <span class="hljs-title function_">get_socket</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">if</span>(index &lt; <span class="hljs-number">0</span> || index &gt;= SOCKET_MAX_NR) &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-type">x_socket_t</span>*)<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> tbl + index;<br>&#125;<br><span class="hljs-comment">/*空间使用*/</span><br><span class="hljs-type">static</span> <span class="hljs-type">x_socket_t</span>* <span class="hljs-title function_">socket_alloc</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <br>    <span class="hljs-type">x_socket_t</span>* s = (<span class="hljs-type">x_socket_t</span>*)<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; SOCKET_MAX_NR; i++) &#123;<br>        <span class="hljs-type">x_socket_t</span>* curr = tbl + i;<br>        <span class="hljs-keyword">if</span>(curr-&gt;state == SOCKET_STATE_FREE) &#123;<br>            curr-&gt;state = SOCKET_STATE_USED;<br>            s = curr;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><span class="hljs-comment">/*空间释放*/</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">socket_free</span><span class="hljs-params">(x_socket* s)</span> &#123;<br>    s-&gt;state = SOCKET_STATE_FREE;<br>&#125;<br><span class="hljs-comment">/*初始化函数：一般初始话结构体空间，字段*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">socket_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-built_in">memset</span>(tbl, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(tbl));<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>空间</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>socket</title>
    <link href="/2023/05/22/socket/"/>
    <url>/2023/05/22/socket/</url>
    
    <content type="html"><![CDATA[<h3 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h3><p><img src="C:\Blog\blog\public\img\socket.jpeg" alt="socket"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs c">sock.c文件<br><br><span class="hljs-comment">//通信sock结构有三种 RAW, DATAGRAM, STREAM</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">sock_ops_t</span> &#123;</span><br>    <br>&#125;<span class="hljs-type">sock_ops_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">x_sock_t</span> &#123;</span><br>    <span class="hljs-type">uint16_t</span> local_port;<br>    <span class="hljs-type">ipaddr_t</span> local_ip;<br>    <span class="hljs-type">ipaddr_t</span> remote_ip;<br>    <span class="hljs-type">uint16_t</span> remote_port;<br>    <span class="hljs-comment">/*回调函数表*/</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">sock_ops_t</span>* ops;<br>    <span class="hljs-comment">/*回调函数错误返回值*/</span><br>    <span class="hljs-type">int</span> err;<br>    <span class="hljs-type">int</span> rcv_tmo;<br>    <span class="hljs-type">int</span> send_tmo;<br>    <br>    <span class="hljs-type">nlist_node_t</span> node;<br>&#125;<span class="hljs-type">sock_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">x_socket_t</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span><br>        SOCKET_STATE_FREE;<br>        SOCKET_STATE_USED;<br>    &#125;state;<br>    <span class="hljs-type">sock_t</span>* sock;<br>&#125;<span class="hljs-type">x_socket_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">sock_wait_t</span> &#123;</span><br>    <span class="hljs-type">int</span> wait_cnt;<br>    <span class="hljs-type">pthread_sem_t</span> wait_sem;<br>&#125;<span class="hljs-type">sock_wait_t</span>;<br><span class="hljs-comment">/*应用发送的消息种类</span><br><span class="hljs-comment">1.应用通过工作线程请求创建socket接口</span><br><span class="hljs-comment">2.应用通过工作线程请求发送消息send()</span><br><span class="hljs-comment">...*/</span><br><span class="hljs-comment">//所以需要对每种消息单独定义一个结构体，最后被req结构体继承</span><br><span class="hljs-comment">//1.创建socket结构体</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">sock_create_t</span> &#123;</span><br>    <span class="hljs-type">int</span> family;<br>    <span class="hljs-type">int</span> type;<br>    <span class="hljs-type">int</span> protocol;<br>&#125;<span class="hljs-type">sock_create_t</span>;<br><span class="hljs-comment">//发送消息结构</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">sock_data_t</span> &#123;</span><br>    <span class="hljs-type">uint8_t</span>* buf;<br>    <span class="hljs-type">size_t</span> len;<br>    <span class="hljs-type">int</span> flags;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">x_sockaddr</span>* <span class="hljs-title">addr</span>;</span><br>    <span class="hljs-type">x_socket_t</span> addr_len;<br>    <span class="hljs-type">size_t</span> comp_len;<br>&#125;<span class="hljs-type">sock_data_t</span>;<br><span class="hljs-comment">//创建req请求结构体</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">sock_req_t</span> &#123;</span><br>    <span class="hljs-type">int</span> sockfd;<br>    <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>      <span class="hljs-type">sock_create_t</span> create;  <br>      <span class="hljs-type">sock_data_t</span> data;<br>    &#125;;<br>&#125;<span class="hljs-type">sock_req_t</span>;<br><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RAW   0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DATAGRAM  1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> STREAM    2</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sock_create_req_in</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> <span class="hljs-type">_func_msg_t</span>* msg)</span> &#123;<br>    <span class="hljs-comment">/*查表的方式处理*/</span><br>    <span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sock_info_t</span> &#123;</span><br>        <span class="hljs-type">int</span> protocol;<br>        <span class="hljs-type">sock_t</span>* (*create)(<span class="hljs-type">int</span> family, <span class="hljs-type">int</span> protocol);<br>    &#125;sock_tbl[] = &#123;<br>        [RAW] = &#123;.protocol = IPPROTO_ICMP, .create = raw_create&#125;<br>    &#125;<br>    <span class="hljs-type">sock_req_t</span>* req = (<span class="hljs-type">sock_req_t</span>*)msg-&gt;param;<br>    <br>    <span class="hljs-type">x_socket_t</span>* s = socket_alloc();<br>    <span class="hljs-keyword">if</span>(!s) &#123;<br>        dbg_error(DBG_SOCK, <span class="hljs-string">&quot;no socket&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sock_info_t</span>* <span class="hljs-title">info</span> =</span> sock_tbl + param-&gt;type;<br>    <span class="hljs-keyword">if</span>(param-&gt;protocol == <span class="hljs-number">0</span>) &#123;<br>        param-&gt;protocol = info-&gt;protocol;<br>    &#125;<br>    <span class="hljs-type">sock_t</span>* sock = info-&gt;create(param-&gt;family, param-&gt;protocol);<br>    <span class="hljs-keyword">if</span>(!sock) &#123;<br>        <br>    &#125;<br>    req-&gt;sockfd = get_index(s);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">sock_data_req_in</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> <span class="hljs-type">_func_msg_t</span>* msg)</span> &#123;<br>    <span class="hljs-type">sock_req_t</span>* req = (<span class="hljs-type">sock_req_t</span>*)msg-&gt;param;<br>    <span class="hljs-type">sock_data_t</span>* param = &amp;req-&gt;data;<br>    <br>&#125; <br><span class="hljs-type">int</span> <span class="hljs-title function_">sock_init</span><span class="hljs-params">(<span class="hljs-type">sock_t</span>* sock, <span class="hljs-type">int</span> family, <span class="hljs-type">int</span> protocol, <span class="hljs-type">sock_ops_t</span>* ops)</span>&#123;<br>    sock-&gt;family = family;<br>    sock-&gt;protocol = protocol;<br>    sock-&gt;ops = ops;<br>    sock-&gt;err = err_net_ok;<br>    sock-&gt;rev_tmo = <span class="hljs-number">0</span>;<br>    sock-&gt;send_tmo = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c">socket.c文件<span class="hljs-comment">//socket接口的实现放在该文件里</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;sock.h&quot;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">x_socket</span><span class="hljs-params">(<span class="hljs-type">int</span> family, <span class="hljs-type">int</span> type, <span class="hljs-type">int</span> protocol)</span> &#123;<br>    <span class="hljs-type">sock_req_t</span> req;<br>    req.sockfd = <span class="hljs-number">-1</span>;<br>    req.create.family = family;<br>    req.create.type = type;<br>    req.create.protocol = protocol;<br>    <span class="hljs-type">int</span> err = exmsg_func_exec(sock_create_req_in, &amp;req);<br>    <span class="hljs-keyword">if</span>(err &lt; <span class="hljs-number">0</span>) &#123;<br>        dbg_error(DBG_SOCKET, <span class="hljs-string">&quot;create socket failed&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> req.sockfd;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">sendto</span><span class="hljs-params">(<span class="hljs-type">int</span> s, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* buf, <span class="hljs-type">size_t</span> len, <span class="hljs-type">int</span> flags, </span><br><span class="hljs-params">          <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> x_sockaddr* dest, <span class="hljs-type">x_socklen_t</span>* dest_len)</span> &#123;<br>    <span class="hljs-keyword">if</span>(!buf || !len) &#123;<br>        dbg_error(DBG_SOCKET, <span class="hljs-string">&quot;param error&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>((dest-&gt;sin_family != AF_INET) || (dest_len != <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> x_sockaddr_in))) &#123;<br>        dbg_error(DBG_SOCKET, <span class="hljs-string">&quot;param error&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-type">ssize_t</span> send_size = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">recvfrom</span><span class="hljs-params">()</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c">raw.c<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;sock.h&quot;</span></span><br><span class="hljs-comment">//定义RAW结构</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">sock_raw_t</span> &#123;</span><br>    <span class="hljs-type">sock_t</span> base;<br>    <span class="hljs-type">sock_wait_t</span> raw_sem;<br>&#125;<span class="hljs-type">sock_raw_t</span><br>    <br><span class="hljs-type">int</span> <span class="hljs-title function_">raw_init</span><span class="hljs-params">()</span> &#123;<br>    <br>&#125;<br><span class="hljs-type">sock_t</span>* <span class="hljs-title function_">raw_create</span><span class="hljs-params">(<span class="hljs-type">int</span> family, <span class="hljs-type">int</span> protocol)</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>socket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>服务器与客户端协议</title>
    <link href="/2023/05/20/%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E4%BA%A4%E4%BA%92%E4%BF%A1%E6%81%AF%E7%B1%BB%E5%9E%8B/"/>
    <url>/2023/05/20/%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E4%BA%A4%E4%BA%92%E4%BF%A1%E6%81%AF%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p><img src="C:\Users\zhulinhui\Pictures\服务器与客户端协议.jpg" alt="服务器与客户端协议"></p><p>应用层协议约定</p><p>1.注册消息</p><p>2.聊天记录</p><p>消息类型(1个字节).子消息类型(1个字节)</p><h3 id="客户端与服务器端交互信息类型"><a href="#客户端与服务器端交互信息类型" class="headerlink" title="客户端与服务器端交互信息类型"></a>客户端与服务器端交互信息类型</h3><table><thead><tr><th>编号</th><th>消息类型</th><th>消息子类型</th><th>简介</th></tr></thead><tbody><tr><td>1</td><td>注册消息</td><td>0</td><td>用户注册向服务器发起注册</td></tr><tr><td>2</td><td>登陆认证消息</td><td>0</td><td>用户登陆认证消息</td></tr><tr><td>3</td><td>好友管理消息</td><td>好友状态查询 : 1<br />好友列表请求: 2<br />增加好友:3<br />删除好友:4<br />列出所有用户:5</td><td>查询好友是否在线<br />客户端向服务器请求好友列表<br />客户端向服务器增加好友<br />客户端向服务器删除好友<br />客户端向服务器请求列出所有用户信息</td></tr><tr><td>4</td><td>聊天信息</td><td>0</td><td>用户向其他用户发送聊天信息</td></tr><tr><td>5</td><td>退出登陆</td><td>0</td><td>用户向服务器发起退出登陆信息</td></tr></tbody></table><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*实现通用消息结构*/</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">msg_header</span> &#123;</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> msg_type;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> msg_len;<br>    <span class="hljs-type">char</span> msg_data[<span class="hljs-number">0</span>];<br>&#125;MSG_HDR;<br></code></pre></td></tr></table></figure><p><img src="C:\Users\zhulinhui\Desktop\pro_photo\communciate\thread.jpg" alt="thread"></p>]]></content>
    
    
    <categories>
      
      <category>通讯协议</category>
      
    </categories>
    
    
    <tags>
      
      <tag>通讯协议</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>优质代码(sprintf)</title>
    <link href="/2023/05/19/sprintf()%20%20%20%20%E7%A7%AF%E7%B4%AF%E4%BB%A3%E7%A0%81/"/>
    <url>/2023/05/19/sprintf()%20%20%20%20%E7%A7%AF%E7%B4%AF%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h3 id="sprintf-积累代码"><a href="#sprintf-积累代码" class="headerlink" title="sprintf()    积累代码"></a>sprintf()    积累代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_MSG</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">backup_single_msg</span><span class="hljs-params">(<span class="hljs-type">char</span> *msg, <span class="hljs-type">int</span> from, <span class="hljs-type">int</span> to FILE *fp)</span><br>&#123;<br>    <span class="hljs-type">char</span> buf[MAX_MSG];<br>    <span class="hljs-type">time_t</span> tick = time(<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br>    n += _snprintf(buf+n, <span class="hljs-keyword">sizeof</span>(buf)-n, <span class="hljs-string">&quot;%d/&quot;</span>, from);<br>    n += _snprintf(buf+n, <span class="hljs-keyword">sizeof</span>(buf)-n, <span class="hljs-string">&quot;%d/&quot;</span>, to);<br>    n += _snprintf(buf+n, <span class="hljs-keyword">sizeof</span>(buf)-n, <span class="hljs-string">&quot;%.24s&quot;</span>, ctime(&amp;tick));<br>    n += _snprintf(buf+n, <span class="hljs-keyword">sizeof</span>(buf)-n, <span class="hljs-string">&quot;%s\n&quot;</span>, msg);<br>    buf[n] = <span class="hljs-string">&quot;\0&quot;</span>;<br>    <span class="hljs-built_in">fputs</span>(buf, fp);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="strtok-积累代码"><a href="#strtok-积累代码" class="headerlink" title="strtok    积累代码"></a>strtok    积累代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">export_msg_sd</span><span class="hljs-params">(FILE* sfp, FILE* dfp, <span class="hljs-type">int</span> from, <span class="hljs-type">int</span> to)</span> &#123;<br>    <span class="hljs-type">char</span> buf[MAX_MSG];<br>    <span class="hljs-comment">/*strtok 用来分割*/</span><br>    <span class="hljs-type">char</span> *token = <span class="hljs-literal">NULL</span>, *next_token = <span class="hljs-literal">NULL</span>, seps[] = <span class="hljs-string">&quot;/&quot;</span>;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码累积</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c实现多态</title>
    <link href="/2023/05/17/c%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%80%81/"/>
    <url>/2023/05/17/c%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%80%81/</url>
    
    <content type="html"><![CDATA[<p>在C语言中，可以使用函数指针实现多态。具体做法是定义一个函数指针数组，该函数指针数组指向不同类型的对象所对应的处理函数，通过调用相应的函数指针实现多态。</p><p>以下是一个简单的示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-type">int</span> y;<br>&#125; Point;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    Point base;<br>    <span class="hljs-type">int</span> radius;<br>&#125; Circle;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    Point base;<br>    <span class="hljs-type">int</span> width;<br>    <span class="hljs-type">int</span> height;<br>&#125; Rectangle;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    Point base;<br>    <span class="hljs-type">int</span> side;<br>&#125; Square;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">draw_circle</span><span class="hljs-params">(Circle* c)</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Drawing a circle at (%d, %d) with radius %d\n&quot;</span>, c-&gt;base.x, c-&gt;base.y, c-&gt;radius);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">draw_rectangle</span><span class="hljs-params">(Rectangle* r)</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Drawing a rectangle at (%d, %d) with width %d and height %d\n&quot;</span>, r-&gt;base.x, r-&gt;base.y, r-&gt;width, r-&gt;height);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">draw_square</span><span class="hljs-params">(Square* s)</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Drawing a square at (%d, %d) with side %d\n&quot;</span>, s-&gt;base.x, s-&gt;base.y, s-&gt;side);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">void</span> (*draw_functions[])(<span class="hljs-type">void</span>*) = &#123; (<span class="hljs-type">void</span> (*)(<span class="hljs-type">void</span>*)) draw_circle, (<span class="hljs-type">void</span> (*)(<span class="hljs-type">void</span>*)) draw_rectangle, (<span class="hljs-type">void</span> (*)(<span class="hljs-type">void</span>*)) draw_square&#125;;<br><br>    Circle circle = &#123; &#123; <span class="hljs-number">10</span>, <span class="hljs-number">20</span> &#125;, <span class="hljs-number">5</span> &#125;;<br>    Rectangle rectangle = &#123; &#123; <span class="hljs-number">30</span>, <span class="hljs-number">40</span> &#125;, <span class="hljs-number">50</span>, <span class="hljs-number">60</span> &#125;;<br>    Square square = &#123; &#123; <span class="hljs-number">70</span>, <span class="hljs-number">80</span> &#125;, <span class="hljs-number">90</span> &#125;;<br><br>    <span class="hljs-type">void</span>* shapes[] = &#123; &amp;circle, &amp;rectangle, &amp;square &#125;;<br>    <span class="hljs-type">int</span> num_shapes = <span class="hljs-keyword">sizeof</span>(shapes) / <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">void</span>*);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num_shapes; i++) &#123;<br>        <span class="hljs-type">void</span> (*draw_function)(<span class="hljs-type">void</span>*) = draw_functions[i];<br>        draw_function(shapes[i]);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>在上面的示例中，我们定义了三种图形类型：圆、矩形和正方形，并分别定义了它们自己的绘制函数。然后，我们将这些不同类型的对象保存到一个指针数组中，并定义了一个函数指针数组，该函数指针数组指向不同类型的对象所对应的处理函数。最后，通过循环调用相应的函数指针实现多态。</p><p>需要注意的是，在调用函数指针时，需要将每个对象的地址强制转换为<code>void*</code>类型，以便传递给函数指针。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>c</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c指针</title>
    <link href="/2023/05/17/%E6%8C%87%E9%92%88/"/>
    <url>/2023/05/17/%E6%8C%87%E9%92%88/</url>
    
    <content type="html"><![CDATA[<h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><h4 id="符号优先级"><a href="#符号优先级" class="headerlink" title="符号优先级"></a>符号优先级</h4><blockquote><p>从变量名开始看, []的优先级大于*</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span>* arr[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;; <span class="hljs-comment">//是一个有4个元素的数组，指向4个int型的指针</span><br><span class="hljs-type">int</span> (* arr)[<span class="hljs-number">4</span>]; <span class="hljs-comment">//整体初始化是一个指针，arr++ 相当于二维数组加行，arr++仅仅只取决于4,与后来指向无关</span><br></code></pre></td></tr></table></figure><h4 id="指针自身类型"><a href="#指针自身类型" class="headerlink" title="指针自身类型"></a>指针自身类型</h4><blockquote><p>从语法的角度看，你只要把指针声明语句里的<span class="label label-warning">一个</span><span class="label label-primary">指针*</span>和<span class="label label-primary">名字</span>去掉，剩下的部分就是这个指针的类型：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">(<span class="hljs-number">1</span>)<span class="hljs-type">int</span>* ptr; <span class="hljs-comment">//指针指向类型是int</span><br>(<span class="hljs-number">2</span>)<span class="hljs-type">char</span>* ptr; <span class="hljs-comment">//指针指向类型是char</span><br>(<span class="hljs-number">3</span>)<span class="hljs-type">int</span>** ptr; <span class="hljs-comment">//指针指向类型是int*</span><br>(<span class="hljs-number">4</span>)<span class="hljs-type">int</span> (* ptr)[<span class="hljs-number">3</span>]; <span class="hljs-comment">//指针自身类型为int(*)[3],指针指向类型是int()[3],定义的指针变量指向了int类型数组，数量为3</span><br>(<span class="hljs-number">5</span>)<span class="hljs-type">int</span>* (* ptr)[<span class="hljs-number">4</span>]; <span class="hljs-comment">//指针指向类型是int* ()[4]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>语法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>chatgpt使用</title>
    <link href="/2023/05/17/chatgpt%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/05/17/chatgpt%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="chatgpt使用"><a href="#chatgpt使用" class="headerlink" title="chatgpt使用"></a>chatgpt使用</h3><p><a href="https://9.234456.xyz/abc.html?t=1684214036817">https://9.234456.xyz/abc.html?t=1684214036817</a></p><p><a href="https://chatbot.theb.ai/#/">https://chatbot.theb.ai/#/</a></p><p>chat.openai.com</p><p>下面是正版gpt</p><p>上面是镜像的</p>]]></content>
    
    
    <categories>
      
      <category>配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>chatgpt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原码 补码 反码</title>
    <link href="/2023/05/13/%E5%8E%9F%E7%A0%81%20%E8%A1%A5%E7%A0%81%20%E5%8F%8D%E7%A0%81/"/>
    <url>/2023/05/13/%E5%8E%9F%E7%A0%81%20%E8%A1%A5%E7%A0%81%20%E5%8F%8D%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h2 id="原码-补码-反码"><a href="#原码-补码-反码" class="headerlink" title="原码 补码 反码"></a>原码 补码 反码</h2><h3 id="对于正数"><a href="#对于正数" class="headerlink" title="对于正数"></a>对于正数</h3><p>原码 &#x3D;&#x3D; 反码 &#x3D;&#x3D; 补码</p><h3 id="对于负数"><a href="#对于负数" class="headerlink" title="对于负数"></a>对于负数</h3><p>机器上存储的是补码</p><p>反码 &#x3D;&#x3D; 原码将所有的数据为取反(符号位不动)</p><p>补码 &#x3D;&#x3D; 反码 + 1</p><p>举例说明，此时若想求 char x &#x3D; -10的三码：</p><p>原码：1000 1010</p><p>反码：1111 0101</p><p>补码：1111 0110</p><p>使用场合：对于负数，可以获取其二进制底层存储(补码)，但是仅从补码看不出具体数值</p><p>​                   需要将补码补码转换得到原码，才能明确数值</p><p>补码 -&gt; -1得到反码 -&gt; 除了最高位，依次取反，得到原码 -&gt;得到数值的绝对值</p><h3 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h3><p>char a &#x3D; -10</p><p>a &lt;&lt; 4 出错了，变成了正数</p>]]></content>
    
    
    <categories>
      
      <category>语法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>可重入函数</title>
    <link href="/2023/05/07/%E5%8F%AF%E9%87%8D%E5%85%A5%E5%87%BD%E6%95%B0/"/>
    <url>/2023/05/07/%E5%8F%AF%E9%87%8D%E5%85%A5%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="可重入函数"><a href="#可重入函数" class="headerlink" title="可重入函数"></a>可重入函数</h3><p>可重入函数也可以这样理解，重入即表示重复进入，首先它意味着这个函数可以被中断，其次意味着它除了使用自己栈上的变量以外不依赖于任何环境（包括static），这样的函数就是（<a href="https://baike.baidu.com/item/%E7%BA%AF%E4%BB%A3%E7%A0%81?fromModule=lemma_inlink">纯代码</a>）可重入，可以允许有多个该函数的副本在运行，由于它们使用的是分离的栈，所以不会互相干扰。如果确实需要访问<a href="https://baike.baidu.com/item/%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F?fromModule=lemma_inlink">全局变量</a>（包括static），一定要注意实施互斥手段。可重入函数在并行运行环境中非常重要，但是一般要为访问全局变量付出一些性能代价。</p>]]></content>
    
    
    <categories>
      
      <category>语法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sprintf和sscanf</title>
    <link href="/2023/05/07/sprintf%E5%92%8Csscanf%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/05/07/sprintf%E5%92%8Csscanf%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="sprintf"><a href="#sprintf" class="headerlink" title="sprintf()"></a>sprintf()</h3><blockquote><p>原型：sprintf(char* buf, char* format…)</p><p>功能：将格式化后的字符串输出到指定的缓冲区域</p><p>参数：参数一为缓存空间(一般为数组)，其余参数和printf()一致</p></blockquote><h3 id="sscanf"><a href="#sscanf" class="headerlink" title="sscanf()"></a>sscanf()</h3><blockquote><p>原型：int sscanf(char* buf, char* format…)</p><p>功能：从指定缓存区域读取指定格式的字符串</p><p>参数：参数一为缓存空间(一般为数组)，其余参数和scanf()一致</p></blockquote><p>###案例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> <span class="hljs-keyword">warning</span>(disable:4996)</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">msg</span> &#123;</span><br><span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br><span class="hljs-type">char</span> addr[<span class="hljs-number">20</span>];<br><span class="hljs-type">char</span> time[<span class="hljs-number">40</span>];<br><span class="hljs-type">char</span> text[<span class="hljs-number">40</span>];<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">msg</span> <span class="hljs-title">message</span> =</span> &#123;<span class="hljs-string">&quot;zhulinhui&quot;</span>, <span class="hljs-string">&quot;JanSu&quot;</span>, <span class="hljs-string">&quot;2023-5-7-16:30&quot;</span>, <span class="hljs-string">&quot;Hello World&quot;</span>&#125;;<br><span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>];<br><span class="hljs-type">char</span>* p = <span class="hljs-literal">NULL</span>;<br><span class="hljs-type">char</span> app[<span class="hljs-number">40</span>];<br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* table[<span class="hljs-number">4</span>] = &#123; <span class="hljs-string">&quot;[name]:&quot;</span>, <span class="hljs-string">&quot;[addr]:&quot;</span>, <span class="hljs-string">&quot;[time]:&quot;</span>, <span class="hljs-string">&quot;[text]:&quot;</span> &#125;;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;发送消息&quot;</span>);<br><span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;[name]: %s\n[addr]: %s\n[time]: %s\n[text]: %s\n&quot;</span>, message.name, message.addr,<br>message.time, message.text);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, buf);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;解析消息&quot;</span>);<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>p = <span class="hljs-built_in">strstr</span>(buf, table[i]);<br>p += <span class="hljs-number">7</span>;<br><span class="hljs-keyword">if</span> (p) &#123;<br><span class="hljs-built_in">sscanf</span>(p, <span class="hljs-string">&quot;%s\n&quot;</span>, app);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, app);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>i++;<br><span class="hljs-keyword">if</span> (i == <span class="hljs-number">4</span>) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>函数使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jupyter快捷键的使用</title>
    <link href="/2023/04/30/jupyter%E5%BF%AB%E6%8D%B7%E9%94%AE%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/04/30/jupyter%E5%BF%AB%E6%8D%B7%E9%94%AE%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h4 id="shift-tab"><a href="#shift-tab" class="headerlink" title="shift + tab"></a>shift + tab</h4><blockquote><p>函数用法全都有，从此不用再百度</p></blockquote><h4 id="tab键，代码补全"><a href="#tab键，代码补全" class="headerlink" title="tab键，代码补全"></a>tab键，代码补全</h4><blockquote><p>敲完pd.qcu后，按tab键，就能补全pd.qcut</p></blockquote><h4 id="esc-后-b键"><a href="#esc-后-b键" class="headerlink" title="esc 后 b键"></a>esc 后 b键</h4><blockquote><p>在下方插入单元</p></blockquote><h4 id="esc-后-a键"><a href="#esc-后-a键" class="headerlink" title="esc 后 a键"></a>esc 后 a键</h4><blockquote><p>在上方插入单元</p></blockquote><h4 id="esc-后-m键"><a href="#esc-后-m键" class="headerlink" title="esc 后 m键"></a>esc 后 m键</h4><blockquote><p>进入markdown模式</p></blockquote><h4 id="esc后-y键"><a href="#esc后-y键" class="headerlink" title="esc后 y键"></a>esc后 y键</h4><blockquote><p>进入代码模式</p></blockquote><h4 id="esc-后-2次d键"><a href="#esc-后-2次d键" class="headerlink" title="esc 后 2次d键"></a>esc 后 2次d键</h4><blockquote><p>删除当前单元</p></blockquote><h4 id="esc-后-Z键"><a href="#esc-后-Z键" class="headerlink" title="esc 后 Z键"></a>esc 后 Z键</h4><blockquote><p>恢复删除的最后一个单元</p></blockquote><h4 id="ctrl-enter"><a href="#ctrl-enter" class="headerlink" title="ctrl + enter"></a>ctrl + enter</h4><blockquote><p>运行当前单元</p></blockquote><h4 id="alt-enter"><a href="#alt-enter" class="headerlink" title="alt + enter"></a>alt + enter</h4><blockquote><p>运行当前单元，并在下方插入一单元</p></blockquote><p>以上是使用jupyter中最常用的快捷键，其中esc是进入命令模式，进入命令模式后能够快读操作单元，例如像切换markdown、代码格式，快入插入、合并单元格等。其余是编辑模式下常用的快捷键，shift + tab键是能够帮助学习的，遇到不熟悉的函数，用这个快捷键能够很快get到用法，而其他的则能够大大提高效率。</p><p>另外：dir(对象)，能够返回对象的属性和方法。它虽然不是快捷键，但好用程度也能和快捷键相提并论了。这个方法能够返回对象的属性方法等，例如在想使用pandas进行等频分箱时，大概记得是cut方法，但不清楚时就可以用这个方法去找一找然后确认，有时候比翻文档和百度更高效。</p>]]></content>
    
    
    <categories>
      
      <category>配置</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>opencv环境安装</title>
    <link href="/2023/04/29/opencv%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
    <url>/2023/04/29/opencv%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h4 id="虚拟环境创建"><a href="#虚拟环境创建" class="headerlink" title="虚拟环境创建"></a>虚拟环境创建</h4><ul><li><span class="label label-primary">virtualenv venv</span></li></ul>]]></content>
    
    
    <categories>
      
      <category>配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>opencv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown基础画图</title>
    <link href="/2023/04/29/Markdown%E5%9F%BA%E7%A1%80%E7%94%BB%E5%9B%BE/"/>
    <url>/2023/04/29/Markdown%E5%9F%BA%E7%A1%80%E7%94%BB%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="Markdown-画图"><a href="#Markdown-画图" class="headerlink" title="Markdown 画图"></a>Markdown 画图</h2><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p>关键字graph表示一个流程图的开始, 同时指定该流程图的方向。</p><p>其中方向描述为：</p><table><thead><tr><th>用词</th><th>含义</th></tr></thead><tbody><tr><td>TB</td><td>从上到下</td></tr><tr><td>BT</td><td>从下到上</td></tr><tr><td>RL</td><td>从右到左</td></tr><tr><td>LR</td><td>从左到右</td></tr></tbody></table><blockquote><p> T&#x3D; TOP, B &#x3D; Bottom, R &#x3D; Right, L &#x3D; Left</p></blockquote><p>最常用的布局方向是TB， LR</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs me">graph LR;<br>  A--&gt;B<br>  B--&gt;C<br>  C--&gt;A<br></code></pre></td></tr></table></figure> <pre><code class=" mermaid">graph LR;  A--&gt;B  B--&gt;C  C--&gt;A</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs me">graph TB;<br>  A--&gt;B<br>  B--&gt;C<br>  C--&gt;A<br></code></pre></td></tr></table></figure><pre><code class=" mermaid">graph TB;  A--&gt;B  B--&gt;C  C--&gt;A</code></pre><h3 id="流程图常用符号及含义"><a href="#流程图常用符号及含义" class="headerlink" title="流程图常用符号及含义"></a>流程图常用符号及含义</h3><table><thead><tr><th>表述</th><th>说明</th><th>含义</th></tr></thead><tbody><tr><td>id[文字]</td><td>矩形节点</td><td>表示过程，也就是整个流程中的一个环节</td></tr><tr><td>id(文字)</td><td>圆角矩形节点</td><td>表示开始和结束</td></tr><tr><td>id((文字))</td><td>圆型节点</td><td>表示连接，为了避免流程过长或有交叉，可将流程切开，成对</td></tr><tr><td>id{文字}</td><td>菱形节点</td><td>表示判断，决策</td></tr><tr><td>id&gt;文字]</td><td>右向旗帜状节点</td><td></td></tr></tbody></table><blockquote><p>id即为节点的唯一标识，A-F是当前节点的名字，类似于变量名，画图时便于引用</p><p>括号内是节点中要显示的文字，默认节点的名字和显示的文字都为A</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mark">graph TB<br>   A<br>   B(圆角矩形节点)<br>   C((圆形节点))<br>   D&#123;菱形节点&#125;<br>   F&gt;右向旗帜状节点]<br></code></pre></td></tr></table></figure><pre><code class=" mermaid">graph TB   A   B(圆角矩形节点)   C((圆形节点))   D&#123;菱形节点&#125;   F&gt;右向旗帜状节点]</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markd">graph TB<br>begin(出门) --&gt; buy[买炸鸡]<br>buy --&gt; IsRemaining&#123;&quot;还有没有炸鸡?&quot;&#125;<br>IsRemaining--&gt;|有|happy[买完炸鸡开心]--&gt;goback(回家)<br>IsRemaining--&gt;|没有|sad[伤心]--&gt;goback(回家)<br></code></pre></td></tr></table></figure><pre><code class=" mermaid">graph TBbegin(出门) --&gt; buy[买炸鸡]buy --&gt; IsRemaining&#123;&quot;还有没有炸鸡?&quot;&#125;IsRemaining--&gt;|有|happy[买完炸鸡开心]--&gt;goback(回家)IsRemaining--&gt;|没有|sad[伤心]--&gt;goback(回家)</code></pre><h3 id="连线"><a href="#连线" class="headerlink" title="连线"></a>连线</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs markdown">graph TB<br><span class="hljs-code">A1--&gt;B1</span><br><span class="hljs-code">A2---B2</span><br><span class="hljs-code">A3--text---B3</span><br><span class="hljs-code">A4--text--&gt;B4</span><br><span class="hljs-code">A5-.-B5</span><br><span class="hljs-code">A6-.-&gt;B6</span><br><span class="hljs-code">A7-.text.-B7</span><br><span class="hljs-code">A8-.text.-&gt;B8</span><br><span class="hljs-code">A9===B9</span><br><span class="hljs-code">A10==&gt;B10</span><br><span class="hljs-code">A11==text===B11</span><br><span class="hljs-code">A12==text==&gt;B12</span><br></code></pre></td></tr></table></figure><pre><code class=" mermaid">graph TBA1--&gt;B1A2---B2A3--text---B3A4--text--&gt;B4A5-.-B5A6-.-&gt;B6A7-.text.-B7A8-.text.-&gt;B8A9===B9A10==&gt;B10A11==text===B11A12==text==&gt;B12</code></pre><h3 id="子图标"><a href="#子图标" class="headerlink" title="子图标"></a>子图标</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">subgraph 子图表名称<br><span class="hljs-code">子图表中的描述语句</span><br><span class="hljs-code">end</span><br></code></pre></td></tr></table></figure><pre><code class=" mermaid">graph TBsubgraph 买炸鸡前begin(出门) --&gt; buy[买炸鸡]endbuy --&gt; IsRemaining&#123;&quot;还有没有炸鸡?&quot;&#125;IsRemaining--&gt;|有|happy[买完炸鸡开心]--&gt;goback(回家)IsRemaining--&gt;|没有|sad[伤心]--&gt;goback(回家)</code></pre><h3 id="序列图"><a href="#序列图" class="headerlink" title="序列图"></a>序列图</h3><h3 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada">pie<br>title Pie Chart<br><span class="hljs-string">&quot;Dog&quot;</span> : 386<br><span class="hljs-string">&quot;Cate&quot;</span> : 85<br><span class="hljs-string">&quot;Rate&quot;</span> : 150<br></code></pre></td></tr></table></figure><pre><code class=" mermaid">pietitle Pie Chart&quot;Dog&quot; : 386&quot;Cate&quot; : 85&quot;Rate&quot; : 150</code></pre><blockquote><p><a href="https://mermaid.js.org/syntax/stateDiagram.html">Typora支持mermaid的官方链接</a>)</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown基础使用</title>
    <link href="/2023/04/29/Markdown%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/04/29/Markdown%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><h4 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h4><h5 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">~~删除线~~ (使用双波浪线 ~~)<br></code></pre></td></tr></table></figure><p>效果：<del>文字</del></p><h5 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-emphasis">*斜体*</span> <br></code></pre></td></tr></table></figure><p>效果：<em>文字</em></p><h5 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">**加粗**</span><br></code></pre></td></tr></table></figure><p>效果：<strong>加粗</strong></p><h5 id="斜体-加粗"><a href="#斜体-加粗" class="headerlink" title="斜体+加粗"></a>斜体+加粗</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markd">***斜体+加粗***<br></code></pre></td></tr></table></figure><p>效果：<em><strong>斜体+加粗</strong></em></p><h5 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markd">&lt;u&gt;下划线&lt;/u&gt;(快捷键command+u)<br></code></pre></td></tr></table></figure><p>效果：<u>文字</u>,  <u>快捷键显示文字</u></p><h5 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mark">==高亮==<br></code></pre></td></tr></table></figure><p>效果：&#x3D;&#x3D;文字&#x3D;&#x3D;</p><h5 id="下标"><a href="#下标" class="headerlink" title="下标"></a>下标</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mark">H~2~<br></code></pre></td></tr></table></figure><p>效果：H<del>2</del>O<del>2</del></p><h5 id="上标"><a href="#上标" class="headerlink" title="上标"></a>上标</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mark">面积 m^2^<br></code></pre></td></tr></table></figure><p>效果：m^2^</p><h5 id="表情"><a href="#表情" class="headerlink" title="表情"></a>表情</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mark">win + .<br></code></pre></td></tr></table></figure><p>效果：:sunglasses:开心   :100:100  :palm_tree:tree  :package:包裹</p><h5 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h5><p>使用 &#x3D;&#x3D;|&#x3D;&#x3D; 来分隔不同单元格，使用&#x3D;&#x3D;-&#x3D;&#x3D;来分隔表头和其他行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mark">name | price<br>---| ----<br>fried chicken | 19<br>cola | 5<br>-------------------------------------<br>快捷键: ctr + t<br></code></pre></td></tr></table></figure><p>效果：</p><table><thead><tr><th align="center">name</th><th align="left">price</th></tr></thead><tbody><tr><td align="center">fried chicken</td><td align="left">19</td></tr><tr><td align="center">cola</td><td align="left">5</td></tr></tbody></table><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h5 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mark">一级引用 &gt; &quot;个人博客&quot;<br>二级引用 &gt;&gt; &quot;主页&quot;<br>二级引用 &gt;&gt; &quot;分类&quot;<br>二级引用 &gt;&gt; &quot;标签&quot;<br></code></pre></td></tr></table></figure><p>效果：</p><blockquote><p>“个人博客”</p></blockquote><blockquote><blockquote><p>“主页”<br>二级引用 &gt;&gt;”分类”<br>二级引用 &gt;&gt;”标签”</p></blockquote></blockquote><h5 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mark">无序列表 符号 * + 空格<br>有序列表 数字 . + 空格<br></code></pre></td></tr></table></figure><p>效果：</p><ul><li>列表</li><li>列表<ol><li>1</li><li>2</li><li>3</li></ol></li></ul><h5 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pkt</span> &#123;</span><br>    <br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mark">*** + 换行<br></code></pre></td></tr></table></figure><hr><h5 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">外部跳转 [<span class="hljs-string">帮助文档</span>](<span class="hljs-link">https://zhulinhui123.github.io</span>)<br>本文本内跳转 [<span class="hljs-string">内部跳转</span>](<span class="hljs-link">#Markdown</span>) 只能跳到标题<br>自动链接 &lt;2722772403@qq.com&gt; 包括的URL和邮箱会自动的转换为链接 <br></code></pre></td></tr></table></figure><p><a href="https://zhulinhui123.github.io/">帮助文档</a></p><p><a href="#Markdown">内部跳转</a></p><p><a href="mailto:&#50;&#x37;&#50;&#50;&#55;&#x37;&#x32;&#52;&#x30;&#51;&#64;&#113;&#113;&#x2e;&#99;&#x6f;&#x6d;">&#50;&#x37;&#50;&#50;&#55;&#x37;&#x32;&#52;&#x30;&#51;&#64;&#113;&#113;&#x2e;&#99;&#x6f;&#x6d;</a></p><h5 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mark">加载网上的图片<br>![图片名字](图片地址)<br></code></pre></td></tr></table></figure><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fc-ssl.duitang.com%2Fuploads%2Fitem%2F201707%2F07%2F20170707001724_PkTLx.thumb.1000_0.jpeg&refer=http%3A%2F%2Fc-ssl.duitang.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1685329767&t=0e7085473190c59552cabff0c1559e9f" alt="cartoon"></p><h5 id="利用Markdown画图"><a href="#利用Markdown画图" class="headerlink" title="利用Markdown画图"></a>利用Markdown画图</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mark"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo 新建文章与页面</title>
    <link href="/2023/04/28/hexo%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0%E4%B8%8E%E9%A1%B5%E9%9D%A2/"/>
    <url>/2023/04/28/hexo%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0%E4%B8%8E%E9%A1%B5%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="npx-hexo-s-p-5555"><a href="#npx-hexo-s-p-5555" class="headerlink" title="npx hexo s -p 5555"></a>npx hexo s -p 5555</h2><span class="label label-primary">打开本地服务器端口号为:5555</span> <h2 id="npx-hexo-g"><a href="#npx-hexo-g" class="headerlink" title="npx hexo g"></a>npx hexo g</h2><span class="label label-primary">更新</span><h2 id="npx-hexo-d"><a href="#npx-hexo-d" class="headerlink" title="npx hexo d"></a>npx hexo d</h2><span class="label label-primary">上传至github</span>]]></content>
    
    
    <categories>
      
      <category>配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/04/26/hello-world/"/>
    <url>/2023/04/26/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
